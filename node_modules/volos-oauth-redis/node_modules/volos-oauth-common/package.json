{
  "name": "volos-oauth-common",
  "version": "0.10.5",
  "license": "MIT",
  "main": "lib/oauth.js",
  "description": "Support for OAuth providers in the Volos system.",
  "homepage": "https://github.com/apigee/volos",
  "keywords": [
    "oauth",
    "express",
    "argo",
    "node.js"
  ],
  "dependencies": {
    "debug": "1.0.x",
    "underscore": "1.6.x"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/apigee/volos.git"
  },
  "readme": "# volos-oauth-common\n\nThis module supports the OAuth 2.0 Authorization Framework. It supports the four standard OAuth 2.0 grant types,\nplus validation of \"API keys,\" based on a set of pluggable service providers.\n\nPlease note that this module doesn't actually do anything on its own, as it needs a service provider that it\ncan use to store access tokens and information about applications. Volos currently supports two service providers:\n\n* volos-oauth-apigee: This makes API calls to Apigee to generate, update, and validate tokens. It is the best\nservice provider to use when building an API that will be deployed to Apigee for production, as you can test\nlocally with the same data that will run inside Apigee.\n* volos-oauth-redis: This stores all the data that it needs in Redis.\n\n## Features\n\nThis module supports the following features:\n\n* Support for all four OAuth 2.0 grant types as defined by [RFC 6749](http://tools.ietf.org/html/rfc6749)\n* Support for bearer tokens as defined by [RFC 6750](http://tools.ietf.org/html/rfc6750)\n* Support for token revocation as defined by [RFC 7009](http://tools.ietf.org/html/rfc7009)\n* Support for \"API key\" validation, using the same data supported by the OAuth implementation\n* Optionally accepts a Volos Cache to improve token validation performance.\n\n## Examples\n\n### Prerequisite: Create a Developer and Organization\n\n    var ManagementProvider = require('volos-management-redis');\n    var config = {\n      encryptionKey : \"abcdefgh12345\",\n    };\n    var management = ManagementProvider.create(config);\n    \n    function createDev(cb) {\n      var devRequest =  {\n        firstName: 'Scott',\n        lastName: 'Ganyo',\n        email: 'sganyo@apigee.com',\n        userName: 'sganyo'\n      };\n    \n      management.createDeveloper(devRequest, cb);\n    }\n    \n    function createApp(developer, cb) {\n      var appRequest = {\n        developerId : developer.id,\n        name: 'MyApplication',\n        scopes: 'scope1 scope2'\n      };\n      management.createApp(appRequest, cb);\n    }\n    \n    createDev(function(e, developer) {\n      console.log(JSON.stringify(developer));\n      createApp(developer, function(e, result) {\n        console.log(JSON.stringify(result));\n      });\n    });\n\n### Initialize your oauth\n\n    var OauthProvider = require('volos-oauth-redis');\n    var oauthConfig = {\n        validGrantTypes: [ 'client_credentials', 'authorization_code', 'implicit_grant', 'password' ];\n        passwordCheck: function (user, pw, cb) { return true; }\n    };\n    var oauth = OauthProvider.create(oauthConfig);\n\n### Set up Express using Middleware\n\n    var app = require('express')();\n    app.get('/authorize', oauth.expressMiddleware().handleAuthorize());\n    app.post('/accesstoken', oauth.expressMiddleware().handleAccessToken());\n    app.post('/invalidate', oauth.expressMiddleware().invalidateToken());\n    app.post('/refresh', oauth.expressMiddleware().refreshToken());\n    app.get('/',\n        oauth.expressMiddleware().authenticate('scope2'),\n        function(req, resp) {\n          resp.json(['hello', 'world']);\n        }\n    );\n    app.listen(9999);\n    \n### Generate a Token using password\n\n    var request = {\n        grant_type: 'password',\n        client_id: 'key',\n        client_secret: 'secret',\n        username: 'username',\n        password: 'password',\n        scope: 'scope1 scope2'\n    };\n    oauth.generateToken(request, function(err, reply) {\n        var token = reply.access_token;\n    });\n\n\n## Interface\n\n### Error Handling\n\nNearly all the methods in this module take a \"callback\" as a parameter. In all cases, the first parameter of\nthe callback will be set to an Error object if the operation fails for any reason, and are \"undefined\" if the\noperation succeeds.\n\n## Cache\n\nThe OAuth module can also accept a Volos Cache to reduce contention and delay in validating tokens. \nNote: Cache passed to Oauth must not specify an encoding option.\n\n### Example\n\n      var Cache = require('volos-cache-memory');\n      var cache = Cache.create('OAuth cache');\n      oauth.useCache(cache);\n\n\n## Middleware\n\n### oauth.expressMiddleware(options)\n\nCreate an object that may be used as \"middleware\" in the Express framework. See below for the details.\n\n### oauth.argoMiddleware(options)\n\nCreate an object that may be used as \"middleware\" in the Argo framework. See below for the details.\n\n## Argo and Express Middleware\n\nThe middleware functions return objects that contain methods, and these methods have functions that\nin turn return other functions, which may be used as \"middleware\". (That sounds complicated but it's\nactually pretty concise.)\n\nBy using the middleware, the work of gathering request bodies and query parameters, and generating responses\nis done automatically, so you have to write much less code.\n\nThe Express middleware follows the pattern used by [Connect](http://www.senchalabs.org/connect/) so it may be\nconfigured in a chain with other Express and Connect middleware.\n\nThe Argo middleware follows the slightly different pattern used by [Argo](https://github.com/argo/argo). Again,\nit may be easily combined with other Argo middleware.\n\nEither way, the same set of middleware functions are available:\n\n### Middleware.handleAuthorize()\n\nReturn a function that may be used as middleware that would be used in the \"/authorize\" URI of an OAuth-enabled\napplication. The middleware will parse the query parameters on the request and generate a JSON response.\n\n### Middleware.handleAccessToken()\n\nReturn a function that would be used as middleware in the \"/accessToken\" URI of an application. The middleware\nwill parse the request body and generate a JSON response.\n\n### Middleware.authenticate()\n\nReturn a function that will check the \"Authorization\" header of the incoming request. If invalid, then it will\ngenerate an error response. Otherwise, it will do nothing, passing the method through to the next handler.\n\n### Middleware.refreshToken()\n\nReturn a function that would be used as middleware to refresh an OAuth token. It will read the request body\nand generate a JSON response.\n\n### Middleware.invalidateToken()\n\nReturn a function that would be used as middleware to invalidate an OAuth token. It will read the request body\nand generate a JSON response.\n\n## Raw API\n\nThe middleware is built on top of a lower-level API, which may be used directly. This would be the case if you\nare using a different web app framework, or if you are not using a web app framework at all, or if you\njust like to do things manually. The lower-level API does not depend on any frameworks, and does not even\ndepend on Node's \"http\" module.\n\n### class: OAuth\n\n### OAuth.authorize(queryString, callback)\n\nFor the OAuth \"authorization code\" grant type, this method returns the authorization code, as described\nin Section 4.1.1 of RFC 6749. \"queryString\" must be set to the query string on the incoming HTTP request.\n\"callback\" will be invoked on completion. If the result is successful, then the second parameter of\n\"callback\" will be an object that contains all the fields of an OAuth 2.0 response as defined in section\n4.1.2.\n\nFor the \"implicit grant\" grant type, this method does the same thing, but the URL that is returned contains\nthe token itself as described in RFC 6749 Section 4.2.2.\n\n    oauth.authorize('response_type=code&client_id=s6BhdRkqt3&state=xyz&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb',\n                    function(err, result) {\n                      if (err) {\n                        // Handle OAuth error\n                      } else {\n                        // return data to client\n                      }\n                    });\n\n### OAuth.generateToken(requestBody, options, callback)\n\nGenerate an OAuth access token based on the specified grant type. This is described\nin Sections 4.1.3 (\"authorization_code\"), 4.3 (\"password\"), and 4.4 (\"client_credentials\"). Of RFC 6749.\nThe \"requestBody\" in this case must be set to the HTTP POST body on the request, which is in turn a\nset of form-encoded parameters.\n\n    oauth.generateToken('grant_type=password&username=johndoe&password=A3ddj3w',\n\n\n### OAuth.refreshToken(requestBody, options, callback)\n\nRefresh an existing OAuth access token as described in section 6 of RFC6749. As in previous requests,\nthe request body is required.\n\n    oauth.refreshToken('grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA',\n                       function(err, result) {\n                          // Check both as described before\n                        });\n\n### OAuth.invalidateToken(requestBody, options, callback)\n\nInvalidate an existing OAuth access token, as described in RFC 7009.\n\n   oauth.invalidateToken('token=45ghiukldjahdnhzdauz&token_type_hint=refresh_token',\n                        function(err, result) {\n                          // Check both as described before\n                        });\n\n### OAuth.verifyToken(authorizationHeader, requiredScopes, callback)\n\nVerify an OAuth bearer token, as described in section 2.1 of RFC 6750. This validates the HTTP \"Authorization\"\nheader against the database. requiredScopes is optional and may be either an array or a space-delimited string.\n\n    oauth.verifyToken('Bearer mF_9.B5f-4.1JqM', 'scope1 scope2', function(err, result) {\n                        function(err, result) {\n                          // Check both as described before\n                        });\n\n### OAuth.verifyApiKey(apiKey, request, callback)\n\nVerify an ApiKey (client id) header against the database. Request is not required.\n\n    oauth.verifyApiKey('some api key', request, function(err, result) {\n                        function(err, result) {\n                          // Check both as described before\n                        });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apigee/volos/issues"
  },
  "_id": "volos-oauth-common@0.10.5",
  "scripts": {},
  "_shasum": "62850a2b78c9968e143ad68c05f5d02411b82503",
  "_from": "volos-oauth-common@0.10.x"
}
