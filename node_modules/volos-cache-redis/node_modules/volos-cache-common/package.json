{
  "name": "volos-cache-common",
  "version": "0.10.2",
  "main": "lib/cache.js",
  "license": "MIT",
  "description": "Basic caching library for the Volos system.",
  "homepage": "https://github.com/apigee/volos",
  "keywords": [
    "cache"
  ],
  "dependencies": {
    "debug": "1.0.x",
    "underscore": "1.6.x"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/apigee/volos.git"
  },
  "readme": "# volos-cache-common\n\nThis module adds support for caching to any API.\n\n## Modules\n\nThis module does not do anything on its own -- it depends on an implementation which stores the cache in a particular\nplace. Current implementations are:\n\n* volos-cache-memory: Stores the cache in memory on the node where the script is running.\n* volos-cache-redis: Stores the cache in redis.\n\n## Example\n\n    var cm = require('volos-cache-memory');\n    var cache = cm.create('name', { ttl: 1000 }); // specifies default ttl as 1000 ms\n    cache.set('key', 'value');\n    cache.get('key', callback);\n\nNote: Avoid creating multiple caches with the same name, the results are not defined by the interface and\nmay vary by implementation.\n\n## Reference\n\n### Class: Cache\n\n#### Cache.set(key, value, options, callback)\n\nSets a value into the cache.\n\n* key (required): A String that identifies the key within the cache.\n* value (required): A String or Buffer that is the value within the cache. If \"value\" is a string, then it will be\nconverted to a Buffer using the encoding field set in \"options\" or \"utf8\" otherwise.\n* options (optional): May include a 'ttl' value that is the time for the value to live in the cache (in milliseconds)\n* callback (optional): If specified, the result of the call is returned via callback. If there was an error, then the\nfirst parameter will be an Error object.\n\n#### Cache.get(key, callback)\n\nGets a value from the cache.\n\n* key (required): A string that identifies the key within the cache.\n* callback (required): If specified, the result of the call is returned via callback. If there was an error, then the\nfirst parameter will be an Error object. Otherwise, the first parameter will be undefined and the second will be\nthe value stored at the passed key.\n\n#### Cache.delete(delete, callback)\n\nDeletes a value from the cache.\n\n* key (required): A string that identifies the key within the cache.\n* callback (optional): If specified, the result of the call is returned via callback. If there was an error, then the\nfirst parameter will be an Error object.\n\n#### Cache.clear(callback)\n\nClears all values from the cache.\n\n* callback (optional): If specified, the result of the call is returned via callback. If there was an error, then the\nfirst parameter will be an Error object.\n\n#### Cache.setEncoding(encoding)\n\nSet the text encoding for values retrieved from the cache. The value will be returned as a String\nin the specified encoding. If this function is never called, then values will always be returned as Buffers.\n\n### Middleware\n\n#### Middleware.cache(id)\n\nCaches \"GET\" requests and their headers.\n\nParameters:\n\n* options is a hash\n    * options.key: (optional) may be a string or a function that takes the request and generates a string key.\n        If not specified, key will be set to the request originalUrl.\n        If a function and the function returns null or undefined, request will not be cached.\n    * options.id (optional) may be a string or a function that takes the request and generates a string id.\n        If not specified, id will be set to the request url.\n\n\n#### Middleware usage examples: \n\n\n##### Quota.connectMiddleware()\n\nReturns middleware that may be used in a Connect server.\n\n```\n  server\n    .use(cache.connectMiddleware().cache())\n    .get('/',\n      function(req, resp) {\n        ...\n```\n \n##### Quota.expressMiddleware()\n\nReturns middleware that may be used in a Express server. \n\n```\n  server\n    .use(cache.expressMiddleware().cache())\n    .get('/',\n      function(req, resp) {\n        ...\n```\n\n##### Quota.argoMiddleware()\n\nReturns middleware that may be used in an Argo server. \n\n```\n  server\n    .use(cache.argoMiddleware().cache())\n    .get('/',\n      function(handle) {\n        handle('request', function(env, next) {\n          ...\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apigee/volos/issues"
  },
  "_id": "volos-cache-common@0.10.2",
  "scripts": {},
  "_shasum": "90dcaec47436f2167f28df3f808b6c1c0d80d7ae",
  "_from": "volos-cache-common@0.10.x"
}
